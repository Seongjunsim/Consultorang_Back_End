<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="account">


    <update id="updateCatType">
        <![CDATA[
            UPDATE
                CATEGORY
            SET type_cd = #{catType}
            WHERE 1=1
                AND user_id = #{userId}
                AND cat_id = #{catId}
        ]]>
    </update>

    <select id="getCatList" resultType="HashMap">
        <![CDATA[
             SELECT
                user_id AS userId,
	            cat_id AS catId,
	            cat_nm AS catNm,
	            type_cd AS typeCd
            FROM CATEGORY
            WHERE 1=1
                AND user_id = #{userId}
        ]]>
        <if test="catType != null and catType !=''">
            AND type_cd = #{catType}
        </if>
    </select>

    <select id="getMenuList" resultType="AccountMenuModel">
        <![CDATA[
             SELECT
	            A.menu_id,
	            B.menu_nm,
	            A.menu_cost,
	            A.sale_quantity
            FROM SALES A
            INNER JOIN MENUS B
            ON A.menu_id = B.menu_id
            WHERE 1=1
	            AND A.user_id = #{userId}
	    ]]>
        <if test="saleYm != null and saleYm != ''">
            AND A.sale_ym = #{saleYm}
        </if>
        <if test="catId != null and catId != ''">
            AND A.cat_id = #{catId}
        </if>
    </select>

    <select id="getCatMaxId" resultType="int">
        SELECT
        ifnull(MAX(cat_id),0)+1 AS catId
        FROM CATEGORY
        WHERE user_id=#{userId}
    </select>

    <select id="getCatId" resultType="int">
        SELECT
        cat_id AS menuId
        FROM CATEGORY
        WHERE user_id=#{userId}
        AND cat_nm=#{catNm}
    </select>


    <select id="getMenuMaxId" resultType="int">
        SELECT
            ifnull(MAX(menu_id),0)+1 AS menuId
        FROM MENUS
        WHERE user_id=#{userId}
    </select>

    <select id="getMenuId" resultType="int">
        SELECT
            menu_id AS menuId
        FROM MENUS
        WHERE user_id=#{userId}
        AND menu_nm=#{menuNm}
    </select>

    <select id="getMenuSize" resultType="int">
        <![CDATA[
            SELECT
                COUNT(*)
            FROM SALES
            WHERE 1=1
        ]]>
        <if test="userId != null and userId != ''">
            AND user_id = #{userId}
        </if>
        <if test="saleYm != null and saleYm != ''">
            AND sale_ym = #{saleYm}
        </if>
        <if test="catId != null and catId != ''">
            AND cat_id = #{catId}
        </if>
    </select>

    <insert id="insertCat">
        <![CDATA[
            INSERT INTO CATEGORY
            (cat_id, user_id, cat_nm, reg_dt)
            VALUES
            (#{catId},#{userId},#{catNm},NOW())
        ]]>
    </insert>

    <insert id="insertSale">
        <![CDATA[
            INSERT INTO SALES
            (user_id, sale_ym, cat_id, menu_id,
             sale_quantity, menu_cost, popularity,
             contribution_margin, menu_engine_cd, reg_dt)
            VALUES
            (#{userId}, #{saleYm}, #{catId}, #{menuId},
             #{saleQuantity}, #{menuCost},
             #{popularity}, #{contributionMargin}, #{menuEngineCd}, NOW())
        ]]>
    </insert>

    <insert id="insertMenu">
        <![CDATA[
            INSERT INTO MENUS
            (user_id, menu_id, menu_nm, up_dt)
            VALUES
            (#{userId}, #{menuId}, #{menuNm}, NOW())
        ]]>
    </insert>

    <select id="getUndefinedCatList" resultType="HashMap">
        <![CDATA[
            SELECT
                cat_id AS catId,
                cat_nm AS catNm
            FROM CATEGORY
            WHERE 1=1
            AND type_cd IS NULL
            AND user_id = #{userId}
        ]]>
    </select>
    
    <select id="getCmMmOperand" resultType="CmMmOperandModel">
        <![CDATA[
            SELECT
            	B.totalSaleQuantity,
            	MIN(sale_quantity)/B.totalSaleQuantity AS minMm,
            	MAX(sale_quantity)/B.totalSaleQuantity AS maxMm,
            	MIN(sale_quantity*menu_cost) AS minSale,
            	MAX(sale_quantity*menu_cost) as maxSale,
            	AVG(sale_quantity*menu_cost) as cm
            FROM
            	SALES A
            JOIN (
            	SELECT SUM(sale_quantity) AS totalSaleQuantity
            	FROM SALES
            	WHERE user_id = #{userId}
            	AND sale_ym=#{saleYm}
            ) B
            WHERE A.user_id = #{userId}
            AND A.sale_ym = #{saleYm}
            AND A.cat_id = #{catId}
            ORDER BY A.menu_cost DESC
            LIMIT #{size}
        ]]>
    </select>

    <select id="getMenuListWithSize" resultType="UpdateMenuModel">
        <![CDATA[
            SELECT *
            FROM SALES

        ]]>
    </select>

    <update id="updateSale">
        UPDATE SALES
        <set>
            <if test="menuCost != null and menuCost != ''">menu_cost = #{menuCost},</if>
            <if test="saleQuantity != null and saleQuantity != ''">sale_quantity=#{saleQuantity},</if>
            <if test="popularity != null and popularity != ''">popularity = #{popularity},</if>
            <if test="contributionMargin != null and contributionMargin != ''">contribution_margin = #{contributionMargin},</if>
            <if test="menuEngineCd != null and menuEngineCd != ''">menu_engine_cd = #{menuEngineCd},</if>
        </set>
        WHERE user_id = #{userId}
        AND sale_ym = #{saleYm}
        AND cat_id = #{catId}
        AND menu_id = #{menuId}
    </update>

    <insert id="insertExpend">
        <![CDATA[
            INSERT INTO EXPEND
            (user_id, expend_ymd, expend_cost, expend_type, re_dt, up_dt)
            VALUES
            (#{userId}, #{expendYmd}, #{expendCost}, #{expendType}, NOW(), NOW())
        ]]>
    </insert>

    <select id="getMenu" resultType="int">
        <![CDATA[
            SELECT user_id
            FROM SALES
            WHERE user_id = #{userId}
            AND sale_ym = #{saleYm}
            AND cat_id = #{catId}
            AND menu_id = #{menuId}
        ]]>
    </select>

    <insert id="insertHistory">
        <![CDATA[
            INSERT INTO SALES_HISTORY
            (user_id, sale_ymd, sale_val, re_dt, up_dt)
            VALUES
            (#{userId}, #{saleYmd}, #{saleVal}, NOW(), NOW())
        ]]>
    </insert>

    <update id="updateHistory">
        <![CDATA[
            UPDATE SALES_HISTORY
            SET
                sale_val = #{saleVal},
                re_dt = NOW(),
                up_dt = NOW()
            WHERE 1=1
                AND user_id = #{userId}
                AND sale_ymd = #{saleYmd}
        ]]>
    </update>

    <select id="getHistorySet" resultType="String">
        <![CDATA[
            SELECT
                sale_ymd
            FROM SALES_HISTORY
            WHERE 1=1
            AND user_id = #{userId}
            AND sale_ymd BETWEEN #{startYmd} AND #{endYmd}
        ]]>
    </select>

    <select id="getTotalSales" resultType="int">
        SELECT
            SUM(menu_cost * sale_quantity)
        FROM
            SALES
        WHERE
            user_id = #{userId}
            AND sale_ym = #{saleYm}
    </select>

    <select id="getTotalHistoryList" resultType="TotalHistoryModel">
        <![CDATA[
            SELECT
	            A.history_type,
	            A.specific_type,
	            A.type_nm,
	            A.ymd,
	            A.val
            FROM (
	            SELECT
            		'SALE' AS history_type,
            		'null' AS specific_type,
            		'영업 수익' AS type_nm,
            		sale_ymd AS ymd,
            		sale_val AS val
            	FROM SALES_HISTORY
            	WHERE user_id=#{userId}
            	AND sale_ymd BETWEEN #{startYmd} AND #{endYmd}
            	UNION
            	SELECT
            	    'SALE' AS history_type,
            	    'null' AS specific_type,
            	    '기타 수익' AS type_nm,
            	    sale_ymd AS ymd,
                    SUM(menu_sale) AS val
                FROM ETC_SALES
                WHERE user_id=#{userId}
            	AND sale_ymd BETWEEN #{startYmd} AND #{endYmd}
            	GROUP BY sale_ymd
            	UNION
            	SELECT
            		'EXPEND' AS history_type,
            		B.expend_type AS specific_type,
            		C.code_nm AS type_nm,
            		B.expend_ymd AS ymd,
            		B.expend_cost AS val
            	FROM EXPEND B
            	JOIN CODES C ON B.expend_type = C.cd
            	WHERE user_id=#{userId}
            	AND expend_ymd BETWEEN #{startYmd} AND #{endYmd}
            	UNION
            	SELECT
            	    'MEMO' AS history_type,
            	    'null' AS specific_type,
            	    'MEMO' AS type_nm,
            	    memo_ymd AS ymd,
            	    memo_str AS val
            	FROM MEMOS
            	WHERE user_id=#{userId}
            	AND memo_ymd BETWEEN #{startYmd} AND #{endYmd}
            ) A
            WHERE 1=1
        ]]>
        <if test="historyType!=null and historyType != '' and historyType!='TOTAL'">
            AND A.history_type = #{historyType}
        </if>
        <if test="specificType!=null and specificType != ''">
            AND A.specific_type = #{specificType}
        </if>
        <![CDATA[
            ORDER BY ymd
        ]]>

    </select>

    <insert id="insertEtcMenu">
        <![CDATA[
            INSERT INTO ETC_SALES
            (user_id, sale_ymd, menu_nm, menu_sale, reg_dt, up_dt)
            VALUES
            (#{userId}, #{saleYmd}, #{menuNm}, #{menuSale}, NOW(), NOW())
        ]]>
    </insert>

    <select id="getEtcMenu" resultType="EtcMenuModel">
        <![CDATA[
            SELECT
                etc_id,
                sale_ymd,
                menu_nm,
                menu_sale
            FROM
                ETC_SALES
            WHERE 1=1
            AND user_id=#{userId}
            AND sale_ymd BETWEEN #{startYmd} AND #{endYmd}
        ]]>
    </select>

    <delete id="deleteEtcMenu">
        <![CDATA[
            DELETE FROM ETC_SALES
            WHERE etc_id = #{etcId}
        ]]>
    </delete>

    <insert id="insertMemo">
        <![CDATA[
            INSERT INTO MEMOS
            (user_id, memo_ymd, memo_str, reg_dt, up_dt)
            VALUES
            (#{userId}, #{memoYmd}, #{memoStr}, NOW(), NOW())
        ]]>
    </insert>


</mapper>